name: Hirease Organization CI

on:
  workflow_call:
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true
  pull_request:
    branches:
      - dev
    types:
      - opened
      - synchronize
      - reopened

jobs:
  setup:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

  eslint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: ESLint
        run: npm run lint

  prettier:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Prettier
        run: npm run format

  commit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Check commit messages
        run: |
          npx commitlint --from=HEAD --to=HEAD

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    needs: [eslint, prettier]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Test
        run: npm run test

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["node"]

    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Directory Structure (Main Repo)
        run: |
          ls -R  # Debugging step to list files and directories

     # - name: Checkout FrontEnd repository
      #  uses: actions/checkout@v3
     #   with:
        #  repository: Hirease/FrontEnd
     #     token: ${{ secrets.GITHUB_TOKEN }}  # Or use a PAT if required
      #    path: FrontEnd

    #  - name: Debug Directory Structure (FrontEnd Repo)
    #    run: |
     #     ls -R FrontEnd  # Debugging step to list files and directories

      - name: Checkout back-end repository
        uses: actions/checkout@v3
        with:
          repository: Hirease/back-end
          token: ${{ secrets.GITHUB_TOKEN }}
          path: back-end

      - name: Debug Directory Structure (Back-End Repo)
        run: |
          ls -R back-end  # Debugging step to list files and directories

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "node"

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Mono-Client Docker Image
        run: |
          cd FrontEnd  # Change to the FrontEnd directory
          docker build -t ghcr.io/hirease/mono-client:latest -f ./Dockerfile .
          docker push ghcr.io/hirease/mono-client:latest

      - name: Build and Push Mono-Server Docker Image
        run: |
          cd back-end  # Change to the back-end directory
          docker build -t ghcr.io/hirease/mono-server:latest -f ./Dockerfile .
          docker push ghcr.io/hirease/mono-server:latest

  sync-docker:
    runs-on: ubuntu-latest
    needs: [setup, eslint, prettier, commit, test, build]

    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout FrontEnd repository
        uses: actions/checkout@v3
        with:
          repository: Hirease/FrontEnd
          token: ${{ secrets.GITHUB_TOKEN }}
          path: FrontEnd

      - name: Checkout back-end repository
        uses: actions/checkout@v3
        with:
          repository: Hirease/back-end
          token: ${{ secrets.GITHUB_TOKEN }}
          path: back-end

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "node"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Mono-Client Docker Image
        run: |
          cd FrontEnd  # Change to the FrontEnd directory
          docker build -t ghcr.io/hirease/mono-client:latest -f ./Dockerfile .
          docker push ghcr.io/hirease/mono-client:latest

      - name: Build and Push Mono-Server Docker Image
        run: |
          cd back-end  # Change to the back-end directory
          docker build -t ghcr.io/hirease/mono-server:latest -f ./Dockerfile .
          docker push ghcr.io/hirease/mono-server:latest
